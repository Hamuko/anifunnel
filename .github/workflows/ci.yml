name: CI/CD

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Cargo cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ./target
        key: build-cargo-registry-{{ runner.os }}
    - name: Run tests
      run: cargo test --verbose

  docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Build cache path
        run: echo "CACHE_PATH=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          context: .
          push: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.CACHE_PATH }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.CACHE_PATH }}:cache,mode=max

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-gnu
            TARGET_CC: aarch64-linux-gnu-gcc
            TARGET_AR: aarch64-linux-gnu-gcc-ar
            OS: ubuntu-latest
          - TARGET: armv7-unknown-linux-gnueabihf
            TARGET_CC: arm-linux-gnueabihf-gcc
            TARGET_AR: arm-linux-gnueabihf-gcc-ar
            OS: ubuntu-latest
          - TARGET: arm-unknown-linux-gnueabihf
            TARGET_CC: arm-linux-gnueabihf-gcc
            TARGET_AR: arm-linux-gnueabihf-gcc-ar
            OS: ubuntu-latest
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
          - TARGET: aarch64-apple-darwin
            OS: macos-latest
          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest
    runs-on: ${{ matrix.OS }}
    env:
      NAME: anifunnel
      TARGET: ${{ matrix.TARGET }}
      TARGET_CC: ${{ matrix.TARGET_CC }}
      TARGET_AR: ${{ matrix.TARGET_AR }}
      OS: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Install and configure dependencies
        shell: bash
        run: |
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      - name: Install rust target
        shell: bash
        run: rustup target add $TARGET
      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
      - name: Build the front-end
        shell: bash
        working-directory: ./frontend
        run: |
          npm install
          npm run build
      - name: Run build
        shell: bash
        run: cargo build --release --verbose --target $TARGET
      - name: Compress
        shell: bash
        run: |
          mkdir -p ./artifacts
          if [[ $OS =~ ^macos.*$ ]]; then
            brew install gnu-tar
            export PATH="$(brew --prefix gnu-tar)/libexec/gnubin:$PATH"
          fi
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-${GITHUB_REF_NAME//\//-}.tar.gz $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ matrix.TARGET }}
          path: |
            ./artifacts

  deploy:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: release-build-*
          merge-multiple: true
      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.tar.gz
